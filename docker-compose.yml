version: '3'

services:

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    ports:
      - '3000:3000'


  broker-service:
    build:
      context: ./broker-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '3001:3001'
    deploy:
      mode: replicated
      replicas: 1
    links:
      - auth-service
      - logger-service
      - mail-service


  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '3002:80'
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: 'host=postgres port=5432 user=postgres password=postgres sslmode=disable timezone=UTC connect_timeout=5'
    links:
      - postgres

  postgres:
    image: 'postgres:latest'
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    volumes:
      - ./data/postgres/:/val/lib/postgresql/data/


  logger-service:
    build:
      context: ./logger-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '3003:80'
    deploy:
      mode: replicated
      replicas: 1
    links:
      - mongo

  mongo:
    image: 'mongo:latest'
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    volumes:
      - ./data/mongo/:/data/db
    command: mongod --quiet --logpath /dev/null


  mail-service:
    build:
      context: ./mail-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - '3004:80'
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      MAIL_NAME: "Ion Vasile"
      MAIL_ADDRESS: "ion.vasile@test.com"
    links:
      - mailhog

  mailhog:
    image: 'mailhog/mailhog:latest'
    restart: always
    ports:
      - '1025:1025'
      - '8025:8025'


  listener-service:
    build:
      context: ./listener-service
      dockerfile: Dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    links:
      - rabbitmq

  rabbitmq:
    image: 'rabbitmq:latest'
    restart: always
    ports:
      - '5672:5672'
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./data/rabbitmq/:/var/lib/rabbitmq/
    command: rabbitmq-server > /dev/null





